{"version":3,"file":"component---src-pages-using-typescript-tsx-9eebd4a38f545da31883.js","mappings":"2NAaA,MAgCaA,EAA0B,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,qBAExD,UAlCwDC,IAAAA,IAAC,KACvDC,EAAI,SACJC,GACD,SACCL,EAAAA,cAACM,EAAAA,EAAM,KACLN,EAAAA,cAAAA,KAAAA,KAAI,mBACc,yBAAG,0BAErBA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,4BAAM,YAAe,0CAClC,4BAAM,YAAe,qCACzC,4BAAM,oBAAuB,MAEvCA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,4BAAM,cAAiB,oBACxD,4BAAM,cAAiB,gBAAa,4BAAM,YAAe,UAEnEA,EAAAA,cAAAA,IAAAA,KAAG,gCAC4B,4BAAOK,EAASE,UAAgB,uBACnDH,EAAKI,KAAKC,UAAU,KAEhCT,EAAAA,cAAAA,IAAAA,KAAG,kCAC+B,IAChCA,EAAAA,cAAAA,IAAAA,CAAGU,KAAK,yEAAwE,kCAE5E,KAGNV,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C,+EC1CX,EAAe,IAA0B,sDCqCzC,MA/Be,IACb,0BAAQC,UCNU,gCDOhB,sBAAIA,UCJW,+BDKb,uBAAKC,GCNU,gCDMgBC,IAAKC,EAAQC,KAAG,KAEjD,sBAAIJ,UCTa,iCDUf,0BACE,gBAAC,EAAAF,KAAI,CAACC,GAAG,YAAW,YAEtB,0BACE,gBAAC,EAAAD,KAAI,CAACC,GAAG,QAAO,QAElB,0BACE,gBAAC,EAAAD,KAAI,CAACC,GAAG,iDAAiDM,OAAO,UAAS,UAE5E,0BACE,gBAAC,EAAAP,KAAI,CAACC,GAAG,SAAQ,SAEnB,0BACE,gBAAC,EAAAD,KAAI,CAACC,GAAG,UAAS,UAEpB,0BACE,gBAAC,EAAAD,KAAI,CAACC,GAAG,SAAQ,SAEnB,0BACE,gBAAC,EAAAD,KAAI,CAACC,GAAG,YAAW,a,yDEmB5B,IArCe,IAAmB,IAAD,MAAjB,SAAEO,GAAU,EAC1B,MAAMf,GAAOgB,EAAAA,EAAAA,gBAAe,cAU5B,OACE,gCACE,gBAAC,IAAM,CAACC,WAAiC,QAAtB,EAAAjB,EAAKI,KAAKc,oBAAY,aAAtB,EAAwBpB,QAAK,UAChD,uBACEqB,MAAO,CACLC,OAAO,SACPC,SAAS,sBACTC,QAAQ,uBAGV,4BAAOP,GACP,0BACEI,MAAO,CACLI,UAAU,iBACVC,SAAS,mBAEZ,MACI,IAAIC,MAAOC,cAAc,gBAC5B,IACA,qBAAGpB,KAAK,4BAA2B,YAGtC,C,+CCFP,IAlCA,SAAa,GAAmC,IAAD,QAAlC,YAAEqB,EAAW,MAAE7B,EAAK,SAAEiB,GAAU,EAC3C,MAAM,KAAEX,IAASY,EAAAA,EAAAA,gBAAe,YAc1BY,EAAkBD,GAAevB,EAAKc,aAAaS,YACnDE,EAAgC,QAApB,EAAGzB,EAAKc,oBAAY,aAAjB,EAAmBpB,MAExC,OACE,gCACE,6BAAQ+B,EAAkB/B,EAAK,MAAM+B,EAAiB/B,GACtD,wBAAMgC,KAAK,cAAcC,QAASH,IAClC,wBAAMI,SAAS,WAAWD,QAASjC,IACnC,wBAAMkC,SAAS,iBAAiBD,QAASH,IACzC,wBAAMI,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBAAMD,KAAK,kBAAkBC,SAA0B,QAAjB,EAAA3B,EAAKc,oBAAY,aAAjB,EAAmBe,SAAM,KAC/D,wBAAMH,KAAK,gBAAgBC,QAASjC,IACpC,wBAAMgC,KAAK,sBAAsBC,QAASH,IACzCb,EAGP,C","sources":["webpack://gatsby-starter-default/./src/pages/using-typescript.tsx","webpack://gatsby-starter-default/./src/images/ct-logo.png","webpack://gatsby-starter-default/./src/components/header.js","webpack://gatsby-starter-default/./src/components/header.module.css","webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  location,\n}) => (\n  <Layout>\n    <h1>\n      Gatsby supports <b>TypeScript by default</b>\n    </h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <code>typescript</code> via npm\n      and run <code>tsc --init</code> to create a <code>tsconfig</code> file.\n    </p>\n    <p>\n      You're currently on the page <code>{location.pathname}</code> which was\n      built on {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","export default __webpack_public_path__ + \"static/ct-logo-37c29b996e3bc1219439c24571581a5f.png\";","import React from 'react';\nimport { Link } from 'gatsby';  // Gatsby's Link component for internal navigation\nimport * as headerStyles from './header.module.css';  // CSS Module for styling\n\nimport ctLogo from \"../images/ct-logo.png\"\n\nconst Header = () => (\n  <header className={headerStyles.header}>\n    <h1 className={headerStyles.title}>\n      <img id={headerStyles.orgLogo} src={ctLogo} alt/>\n    </h1>\n    <ul className={headerStyles.navList}>\n      <li>\n        <Link to=\"#project\">PROJECT</Link>\n      </li>\n      <li>\n        <Link to=\"#faq\">FAQ</Link>\n      </li>\n      <li>\n        <Link to=\"https://dl.acm.org/doi/10.1145/3593013.3594020\" target=\"_blank\">PAPER</Link>\n      </li>\n      <li>\n        <Link to=\"#data\">DATA</Link>\n      </li>\n      <li>\n        <Link to=\"#press\">PRESS</Link>\n      </li>\n      <li>\n        <Link to=\"#team\">TEAM</Link>\n      </li>\n      <li>\n        <Link to=\"#support\">SUPPORT</Link>\n      </li>\n    </ul>\n  </header>\n);\n\nexport default Header;\n","// extracted by mini-css-extract-plugin\nexport var header = \"header-module--header--666b3\";\nexport var navList = \"header-module--navList--0129c\";\nexport var orgLogo = \"header-module--orgLogo--88fe7\";\nexport var title = \"header-module--title--de67b\";","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: `var(--size-content)`,\n          padding: `var(--size-gutter)`,\n        }}\n      >\n        <main>{children}</main>\n        <footer\n          style={{\n            marginTop: `var(--space-5)`,\n            fontSize: `var(--font-sm)`,\n          }}\n        >\n          Â© {new Date().getFullYear()} &middot; Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","_ref","data","location","Layout","pathname","site","buildTime","href","Link","to","className","id","src","ctLogo","alt","target","children","useStaticQuery","siteTitle","siteMetadata","style","margin","maxWidth","padding","marginTop","fontSize","Date","getFullYear","description","metaDescription","defaultTitle","name","content","property","author"],"sourceRoot":""}